heat_template_version: queens

description: >
  OpenStack Neutron ML2/Nuage plugin configured with Puppet
parameters:
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  # Config specific parameters, to be provided via parameter_defaults
  NeutronNuageNetPartitionName:
    description: Specifies the title that you will see on the VSD
    type: string
    default: 'default_name'

  NeutronNuageVSDIp:
    description: IP address and port of the Virtual Services Directory
    type: string

  NeutronNuageVSDUsername:
    description: Username to be used to log into VSD
    type: string

  NeutronNuageVSDPassword:
    description: Password to be used to log into VSD
    type: string

  NeutronNuageVSDOrganization:
    description: Organization parameter required to log into VSD
    type: string
    default: 'organization'

  NeutronNuageBaseURIVersion:
    description: URI version to be used based on the VSD release
    type: string
    default: 'default_uri_version'

  NeutronNuageCMSId:
    description: Cloud Management System ID (CMS ID) to distinguish between OS instances on the same VSD
    type: string

  UseForwardedFor:
    description: Treat X-Forwarded-For as the canonical remote address. Only enable this if you have a sanitizing proxy.
    type: boolean
    default: false

  NovaPatchConfigMonkeyPatch:
    description: Apply monkey patching or not
    type: boolean
    default: false

  NovaPatchConfigMonkeyPatchModules:
    description: List of modules/decorators to monkey patch
    type: comma_delimited_list
    default: ''

  NuageDefaultAllowNonIP:
    description: To allow non-IP traffic by default
    type: boolean
    default: false

  NuageGpgKeys:
    type: comma_delimited_list
    default: []
    description: Nuage GPG keys

resources:

  NeutronMl2Base:
    type: ./neutron-plugin-ml2.yaml
    properties:
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      EndpointMap: {get_param: EndpointMap}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the Neutron ML2/Nuage plugin
    value:
      service_name: neutron_plugin_ml2_nuage
      config_settings:
        map_merge:
          - get_attr: [NeutronMl2Base, role_data, config_settings]
          - neutron::plugins::ml2::nuage::nuage_net_partition_name: {get_param: NeutronNuageNetPartitionName}
            neutron::plugins::ml2::nuage::nuage_vsd_ip: {get_param: NeutronNuageVSDIp}
            neutron::plugins::ml2::nuage::nuage_vsd_username: {get_param: NeutronNuageVSDUsername}
            neutron::plugins::ml2::nuage::nuage_vsd_password: {get_param: NeutronNuageVSDPassword}
            neutron::plugins::ml2::nuage::nuage_vsd_organization: {get_param: NeutronNuageVSDOrganization}
            neutron::plugins::ml2::nuage::nuage_base_uri_version: {get_param: NeutronNuageBaseURIVersion}
            neutron::plugins::ml2::nuage::nuage_cms_id: {get_param: NeutronNuageCMSId}
            neutron::plugins::ml2::nuage::nuage_default_allow_non_ip: {get_param: NuageDefaultAllowNonIP}
            nova::api::use_forwarded_for: {get_param: UseForwardedFor}
            nova::patch::config::monkey_patch: {get_param: NovaPatchConfigMonkeyPatch}
            nova::patch::config::monkey_patch_modules: {get_param: NovaPatchConfigMonkeyPatchModules}
      step_config: |
        include tripleo::profile::base::neutron::plugins::ml2
      metadata_settings:
        get_attr: [NeutronMl2Base, role_data, metadata_settings]
      host_prep_tasks:
        - name: Check if Nuage is installed or not
          shell: rpm -q nuage-openstack-neutronclient selinux-policy-nuage
          register: nuage_check
          failed_when: false
        - name : Installing Nuage Packages and Dependencies
          block:
          # Only install when nuage is not installed already.
          - name: set nuage_gpg_keys fact
            set_fact:
              nuage_gpg_keys: {get_param: NuageGpgKeys }
          - name: Adding nuage_gpg_keys on overcloud node
            rpm_key:
              state: present
              key: "{{ item }}"
            with_items:
              - "{{ nuage_gpg_keys }}"
            when:
              - nuage_gpg_keys != []
          - debug:
              msg: "No NuageGpgKeys Environment variable is set for this deployment"
            when:
              - nuage_gpg_keys == []
          - name: Install Nuage Neutron Client on overcloud controller node
            yum:
              name: "{{ packages }}"
              state: present
            vars:
              packages:
                - selinux-policy-nuage
                - nuage-openstack-neutronclient
          when: nuage_check.rc != 0
      update_tasks:
        - block:
          - name: get bootstrap nodeid
            command: hiera -c /etc/puppet/hiera.yaml bootstrap_nodeid
            register: bootstrap_node
          - name: set is_bootstrap_node fact
            set_fact:
              is_bootstrap_node: "{{bootstrap_node.stdout|lower == ansible_hostname|lower}}"
          - block:
            - name: get the nuage_previous_version
              command: docker exec -u root neutron_api sh -c "rpm -qa nuage-openstack-neutron"
              register: nuage_previous_version
            - name: Create the file with nuage_previous version
              copy:
                content: "{{ nuage_previous_version.stdout }}"
                dest: /tmp/nuage_previous_version
                force: no
            when: (is_bootstrap_node|bool)
          when: (step|int == 1)
        - block:
          - name: check if nuage-openvswitch is installed
            shell: rpm -q nuage-openvswitch
            register: nuage_openvswitch_check
            ignore_errors: True
          - block:
            - name: check if python-openvswitch-nuage is present in the repo
              command: repoquery --all python-openvswitch-nuage
              register: python_openvswitch_nuage_output
            - name: Installing python-openvswitch-nuage
              yum:
                name: python-openvswitch-nuage
                state: present
              when: python_openvswitch_nuage_output.stdout != ''
            - name: Check if nuage-bgp is installed
              shell: rpm -qa | grep -q nuage-bgp
              failed_when: false
              register: nuage_bgp_check
            - name: Check and update nuage-bgp package
              block:
                - name: check if nuage-bgp is updating
                  shell: yum check-update nuage-bgp
                  register: nuage_bgp_update_check
                  failed_when: nuage_bgp_update_check.rc not in [0, 100]
                  changed_when: nuage_bgp_update_check.rc == 100
                - name: Updating nuage-bgp package
                  block:
                    - name: Update nuage-bgp with noscripts flag
                      shell: yum --setopt=tsflags=noscripts install nuage-bgp -y
                    - name: Reload daemon and restart nuage-bgp
                      systemd:
                        state: restarted
                        daemon_reload: yes
                        name: nuage-bgp
                  when: nuage_bgp_update_check.rc == 100
              when: nuage_bgp_check.rc == 0
            when: nuage_openvswitch_check.rc == 0
          when: (step|int == 2)
      post_update_tasks:
        - block:
          - name: get bootstrap nodeid
            command: hiera -c /etc/puppet/hiera.yaml bootstrap_nodeid
            register: bootstrap_node
          - name: set is_bootstrap_node fact
            set_fact:
              is_bootstrap_node: "{{bootstrap_node.stdout|lower == ansible_hostname|lower}}"
          - block:
            - name: get the updated nuage plugin verison
              command: docker exec -u root neutron_api sh -c "rpm -qa nuage-openstack-neutron"
              register: update_version_output
            - name: get nuage plugin previous version
              command: cat /tmp/nuage_previous_version
              register: previous_version_output
            - block:
              - name: set nuage_previous_version fact
                set_fact:
                  nuage_previous_version="{{ previous_version_output.stdout.replace('\\"',':').split("-")[4].split('.')[0:2] | join('.')}}"
              - name: set nuage_update_version fact
                set_fact:
                  nuage_update_version="{{ update_version_output.stdout.replace('\\"',':').split("-")[4].split('.')[0:2] | join('.')}}"
              - name: set neutron_config fact
                set_fact:
                  neutron_config: "/etc/neutron/neutron.conf"
              - name: set nuage_plugin fact
                set_fact:
                  nuage_plugin: "/etc/neutron/plugins/nuage/plugin.ini"
              - name: Running Nuage upgrade scripts
                command: docker exec -u root neutron_api sh -c "python /opt/nuage_upgrade/{{ item.1 }} --neutron-conf {{ neutron_config }} --nuage-conf {{ nuage_plugin }}"
                when: "{{ (item.0 | float > nuage_previous_version | float) and (item.0 | float <= nuage_update_version | float) }}"
                with_list:
                  [['5.3','nuage_upgrade_to_5.3.py'], ['5.4','nuage_upgrade_to_5_4_1.py'], ['6.0','nuage_upgrade_to_6_0.py']]
              - name: Restarting neutron server container
                command: docker restart neutron_api
              when: previous_version_output != update_version_output
            - name: Remove nuage_previous_version file
              file:
                path: /tmp/nuage_previous_version
                state: absent
            when: is_bootstrap_node|bool
          when: step|int == 1
