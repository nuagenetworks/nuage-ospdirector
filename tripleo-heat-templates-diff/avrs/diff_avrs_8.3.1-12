diff -ruN openstack-tripleo-heat-templates-original/common/deploy-steps.j2 openstack-tripleo-heat-templates/common/deploy-steps.j2
--- openstack-tripleo-heat-templates-original/common/deploy-steps.j2	2019-04-03 13:53:57.240175754 -0400
+++ openstack-tripleo-heat-templates/common/deploy-steps.j2	2019-04-03 13:55:11.314175754 -0400
@@ -355,7 +355,7 @@
   {%- for dep in enabled_roles %}
       - {{dep.name}}Deployment_Step{{deploy_steps_max - 1}}
   {%- endfor %}
-    type: OS::TripleO::NodeExtraConfigPost
+    type: OS::TripleO::{{role.name}}ExtraConfigPost
     properties:
         servers: {get_param: [servers, {{role.name}}]}
 
diff -ruN openstack-tripleo-heat-templates-original/docker/services/nova-compute-avrs.yaml openstack-tripleo-heat-templates/docker/services/nova-compute-avrs.yaml
--- openstack-tripleo-heat-templates-original/docker/services/nova-compute-avrs.yaml	1969-12-31 19:00:00.000000000 -0500
+++ openstack-tripleo-heat-templates/docker/services/nova-compute-avrs.yaml	2019-04-03 13:55:39.937175754 -0400
@@ -0,0 +1,129 @@
+heat_template_version: queens
+
+description: >
+  OpenStack containerized Nova Compute Avrs service
+
+parameters:
+  DockerNovaComputeAvrsImage:
+    description: image
+    type: string
+  DockerNovaLibvirtAvrsConfigImage:
+    description: The container image to use for the nova_libvirt config_volume
+    type: string
+  ServiceData:
+    default: {}
+    description: Dictionary packing service data
+    type: json
+  ServiceNetMap:
+    default: {}
+    description: Mapping of service_name -> network name. Typically set
+                 via parameter_defaults in the resource registry.  This
+                 mapping overrides those in ServiceNetMapDefaults.
+    type: json
+  DefaultPasswords:
+    default: {}
+    type: json
+  RoleName:
+    default: ''
+    description: Role name on which the service is applied
+    type: string
+  RoleParameters:
+    default: {}
+    description: Parameters specific to the role
+    type: json
+  EndpointMap:
+    default: {}
+    description: Mapping of service endpoint -> protocol. Typically set
+                 via parameter_defaults in the resource registry.
+    type: json
+  EnableInstanceHA:
+    default: false
+    description: Whether to enable an Instance Ha configurarion or not.
+                 This setup requires the Compute role to have the
+                 PacemakerRemote service added to it.
+    type: boolean
+
+resources:
+
+  ContainersCommon:
+    type: ./containers-common.yaml
+
+  MySQLClient:
+    type: ../../puppet/services/database/mysql-client.yaml
+
+  NovaComputeCommon:
+    type: ./nova-compute-common.yaml
+    properties:
+      EndpointMap: {get_param: EndpointMap}
+      ServiceData: {get_param: ServiceData}
+      ServiceNetMap: {get_param: ServiceNetMap}
+      DefaultPasswords: {get_param: DefaultPasswords}
+      RoleName: {get_param: RoleName}
+      RoleParameters: {get_param: RoleParameters}
+
+  NovaComputeAvrsBase:
+    type: ../../puppet/services/nova-compute.yaml
+    properties:
+      EndpointMap: {get_param: EndpointMap}
+      ServiceData: {get_param: ServiceData}
+      ServiceNetMap: {get_param: ServiceNetMap}
+      DefaultPasswords: {get_param: DefaultPasswords}
+      RoleName: {get_param: RoleName}
+      RoleParameters: {get_param: RoleParameters}
+
+  NovaComputeAvrsDockerBase:
+    type: ../../docker/services/nova-compute.yaml
+    properties:
+      EnableInstanceHA: {get_param: EnableInstanceHA}
+      DockerNovaComputeImage: {get_param: DockerNovaComputeAvrsImage}
+      EndpointMap: {get_param: EndpointMap}
+      ServiceData: {get_param: ServiceData}
+      ServiceNetMap: {get_param: ServiceNetMap}
+      DefaultPasswords: {get_param: DefaultPasswords}
+      RoleName: {get_param: RoleName}
+      RoleParameters: {get_param: RoleParameters}
+
+  NovaLogging:
+    type: OS::TripleO::Services::Logging::NovaCommon
+    properties:
+      DockerNovaImage: {get_param: DockerNovaComputeAvrsImage}
+      NovaServiceName: 'compute'
+
+conditions:
+  enable_instance_ha: {equals: [{get_param: EnableInstanceHA}, true]}
+
+outputs:
+  role_data:
+    description: Role data for the Nova Compute service.
+    value:
+      service_name: {get_attr: [NovaComputeAvrsBase, role_data, service_name]}
+      cellv2_discovery: true
+      config_settings:
+        map_merge:
+          - get_attr: [NovaComputeAvrsBase, role_data, config_settings]
+          - get_attr: [NovaLogging, config_settings]
+      logging_source: {get_attr: [NovaComputeAvrsBase, role_data, logging_source]}
+      logging_groups: {get_attr: [NovaComputeAvrsBase, role_data, logging_groups]}
+      service_config_settings: {get_attr: [NovaComputeAvrsBase, role_data, service_config_settings]}
+      puppet_config:
+        config_volume: nova_libvirt
+        puppet_tags: nova_config,nova_paste_api_ini
+        step_config:
+          list_join:
+            - "\n"
+            - - {get_attr: [NovaComputeAvrsBase, role_data, step_config]}
+              - {get_attr: [MySQLClient, role_data, step_config]}
+        config_image: {get_param: DockerNovaLibvirtAvrsConfigImage}
+      kolla_config:
+        get_attr: [NovaComputeAvrsDockerBase, role_data, kolla_config]
+      docker_config_scripts:
+        get_attr: [NovaComputeCommon, docker_config_scripts]
+      docker_config:
+        get_attr: [NovaComputeAvrsDockerBase, role_data, docker_config]
+      host_prep_tasks:
+        get_attr: [NovaComputeAvrsDockerBase, role_data, host_prep_tasks]
+      upgrade_tasks:
+        get_attr: [NovaComputeAvrsDockerBase, role_data, upgrade_tasks]
+      fast_forward_upgrade_tasks:
+        get_attr: [NovaComputeAvrsDockerBase, role_data, fast_forward_upgrade_tasks]
+
diff -ruN openstack-tripleo-heat-templates-original/extraconfig/post_deploy/avrs-post.yaml openstack-tripleo-heat-templates/extraconfig/post_deploy/avrs-post.yaml
--- openstack-tripleo-heat-templates-original/extraconfig/post_deploy/avrs-post.yaml	1969-12-31 19:00:00.000000000 -0500
+++ openstack-tripleo-heat-templates/extraconfig/post_deploy/avrs-post.yaml	2019-04-03 13:55:39.937175754 -0400
@@ -0,0 +1,80 @@
+heat_template_version: 2014-10-16
+description: 'Extra Post Deployment Config'
+parameters:
+  servers:
+    type: json
+  FastPathMask:
+    type: string
+    default: ""
+  FastPathNics:
+    type: string
+    default: ""
+  CorePortMapping:
+    type: string
+    default: ""
+  FastPathMemory:
+    type: string
+    default: ""
+  VmMemory:
+    type: string
+    default: ""
+  NbMbuf:
+    type: string
+    default: ""
+  FastPathOffload:
+    type: string
+    default: ""
+  FastPathNicDescriptors:
+    type: string
+    default: ""
+  FastPathOptions:
+    type: string
+    default: ""
+  FastPathDPVI:
+    type: string
+    default: ""
+resources:
+  ExtraDeployments:
+    type: OS::Heat::StructuredDeployments
+    properties:
+      servers:  {get_param: servers}
+      config: {get_resource: ExtraConfig}
+      # Do this on CREATE/UPDATE (which is actually the default)
+      actions: ['CREATE', 'UPDATE']
+
+  ExtraConfig:
+    type: OS::Heat::SoftwareConfig
+    properties:
+      group: script
+      config:
+        str_replace:
+          template: |
+            #!/bin/bash
+            set -x
+            declare -A fast_path_params
+            fast_path_params=( ["FP_MASK"]="$FP_MASK" ["FP_PORTS"]="$FP_PORTS" ["CORE_PORT_MAPPING"]="$CORE_PORT_MAPPING" ["FP_MEMORY"]="$FP_MEMORY" ["VM_MEMORY"]="$VM_MEMORY" ["NB_MBUF"]="$NB_MBUF" ["FP_OFFLOAD"]="$FP_OFFLOAD" ["FPNSDK_OPTIONS"]="$FPNSDK_OPTIONS" ["DPVI_MASK"]=$DPVI_MASK ["FP_OPTIONS"]=$FP_OPTIONS)
+            for param in "${!fast_path_params[@]}" ; do
+                FP_VAR=${fast_path_params[$param]}
+                if [[ ! -z $FP_VAR ]] ; then
+                    echo ": \${$param:=$FP_VAR}" >> /usr/local/etc/fast-path.env
+                fi
+            done
+            crudini --set /var/lib/config-data/puppet-generated/nova_libvirt/etc/nova/nova.conf DEFAULT monkey_patch true
+            crudini --set /var/lib/config-data/puppet-generated/nova_libvirt/etc/nova/nova.conf DEFAULT monkey_patch_modules nova.virt.libvirt.vif:openstack_6wind_extensions.queens.nova.virt.libvirt.vif.decorator
+            crudini --set /etc/fp-vdev.ini pmd-vhost sockfolder /var/lib/vhost_sockets
+            systemctl enable avrs
+            systemctl start avrs
+            docker restart nova_libvirt
+            docker restart nova_compute
+          params:
+            $FP_MASK: {get_param: FastPathMask}
+            $FP_PORTS: {get_param: FastPathNics}
+            $CORE_PORT_MAPPING: {get_param: CorePortMapping}
+            $FP_MEMORY: {get_param: FastPathMemory}
+            $VM_MEMORY: {get_param: VmMemory}
+            $NB_MBUF: {get_param: NbMbuf}
+            $FP_OFFLOAD: {get_param: FastPathOffload}
+            $FPNSDK_OPTIONS: {get_param: FastPathNicDescriptors}
+            $DPVI_MASK: {get_param: FastPathDPVI}
+            $FP_OPTIONS: {get_param: FastPathOptions}
+
diff -ruN openstack-tripleo-heat-templates-original/firstboot/avrs-first-boot.yaml openstack-tripleo-heat-templates/firstboot/avrs-first-boot.yaml
--- openstack-tripleo-heat-templates-original/firstboot/avrs-first-boot.yaml	1969-12-31 19:00:00.000000000 -0500
+++ openstack-tripleo-heat-templates/firstboot/avrs-first-boot.yaml	2019-04-03 13:55:39.938175754 -0400
@@ -0,0 +1,71 @@
+heat_template_version: 2014-10-16
+
+description: >
+  This is an example showing how you can do firstboot configuration
+  of the nodes via cloud-init.  To enable this, replace the default
+  mapping of OS::TripleO::NodeUserData in ../overcloud_resource_registry*
+
+parameters:
+  ComputeKernelArgs:
+    description: >
+      Space seprated list of Kernel args to be update to grub.
+      The given args will be appended to existing args of GRUB_CMDLINE_LINUX in file /etc/default/grub
+      Example: "intel_iommu=on default_hugepagesz=1GB hugepagesz=1G hugepages=1"
+    type: string
+    default: ""
+  HostIsolatedCoreList:
+    description: >
+      A list or range of physical CPU cores to be tuned as isolated_cores.
+      The given args will be appended to the tuned cpu-partitioning profile.
+      Ex. HostIsolatedCoreList: '4-12' will tune cores from 4-12
+    type: string
+    default: ""
+
+resources:
+  userdata:
+    type: OS::Heat::MultipartMime
+    properties:
+      parts:
+      - config: {get_resource: compute_kernel_args}
+
+  compute_kernel_args:
+    type: OS::Heat::SoftwareConfig
+    properties:
+      config:
+        str_replace:
+          template: |
+            #!/bin/bash
+            sed 's/^\(GRUB_CMDLINE_LINUX=".*\)"/\1 $KERNEL_ARGS isolcpus=$TUNED_CORES"/g' -i /etc/default/grub ;
+            grub2-mkconfig -o /etc/grub2.cfg
+            createrepo /6wind/.
+            touch /etc/yum.repos.d/nuage_6wind.repo
+            echo "[nuage_6wind]" >> /etc/yum.repos.d/nuage_6wind.repo
+            echo "name=nuage_6wind" >> /etc/yum.repos.d/nuage_6wind.repo
+            echo "baseurl=file:///6wind/" >> /etc/yum.repos.d/nuage_6wind.repo
+            echo "enabled = 1" >> /etc/yum.repos.d/nuage_6wind.repo
+            echo "gpgcheck = 0" >> /etc/yum.repos.d/nuage_6wind.repo
+            yum install -y selinux-policy-nuage-avrs
+            yum install -y python-pyelftools
+            yum install -y dkms
+            yum remove -y dpdk
+            yum install -y 6windgate*
+            yum remove -y nuage-openvswitch
+            yum install -y nuage-openvswitch*
+            yum install -y nuage-metadata-agent*
+            yum install -y virtual-accelerator*
+            rm -rf /6wind/repodata
+            rm -rf /etc/yum.repos.d/nuage_6wind.repo
+            reboot
+          params:
+            $KERNEL_ARGS: {get_param: ComputeKernelArgs}
+            $TUNED_CORES: {get_param: HostIsolatedCoreList}
+
+
+outputs:
+  # This means get_resource from the parent template will get the userdata, see:
+  # http://docs.openstack.org/developer/heat/template_guide/composition.html#making-your-template-resource-more-transparent
+  # Note this is new-for-kilo, an alternative is returning a value then using
+  # get_attr in the parent template instead.
+  OS::stack_id:
+    value: {get_resource: userdata}
+
diff -ruN openstack-tripleo-heat-templates-original/overcloud-resource-registry-puppet.j2.yaml openstack-tripleo-heat-templates/overcloud-resource-registry-puppet.j2.yaml
--- openstack-tripleo-heat-templates-original/overcloud-resource-registry-puppet.j2.yaml	2019-04-03 13:53:57.551175754 -0400
+++ openstack-tripleo-heat-templates/overcloud-resource-registry-puppet.j2.yaml	2019-04-03 13:55:39.939175754 -0400
@@ -60,6 +60,7 @@
   OS::TripleO::NodeUserData: firstboot/userdata_default.yaml
 {% for role in roles %}
   OS::TripleO::{{role.name}}::NodeUserData: firstboot/userdata_default.yaml
+  OS::TripleO::{{role.name}}ExtraConfigPost: extraconfig/post_deploy/default.yaml
 {% endfor %}
   OS::TripleO::NodeTLSCAData: OS::Heat::None
   OS::TripleO::NodeTLSData: OS::Heat::None
@@ -199,6 +200,7 @@
   OS::TripleO::Services::MongoDb: puppet/services/disabled/mongodb-disabled.yaml
   OS::TripleO::Services::NovaApi: docker/services/nova-api.yaml
   OS::TripleO::Services::NovaCompute: docker/services/nova-compute.yaml
+  OS::TripleO::Services::NovaComputeAvrs: docker/services/nova-compute-avrs.yaml
   OS::TripleO::Services::NovaConductor: docker/services/nova-conductor.yaml
   OS::TripleO::Services::NovaConsoleauth: docker/services/nova-consoleauth.yaml
   OS::TripleO::Services::NovaLibvirt: docker/services/nova-libvirt.yaml
